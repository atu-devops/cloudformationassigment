AWSTemplateFormatVersion: '2010-09-09'
Description: VPC with public and private subnets and a NAT Gateway

Resources:

  FridayHittVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: FridayHittVPC

  # IGW
  ##########
  FridayHittInternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: FridayHittInternetGateway

  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref FridayHittVPC
      InternetGatewayId: !Ref FridayHittInternetGateway

  # Subnets
  ##########
  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref FridayHittVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - 0
        - !GetAZs
            Ref: 'AWS::Region'
      Tags:
        - Key: Name
          Value: PublicSubnet

  ApplicationSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref FridayHittVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select
        - 1
        - !GetAZs
            Ref: 'AWS::Region'
      Tags:
        - Key: Name
          Value: ApplicationSubnet        

  DatabaseSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref FridayHittVPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select 
        - 0
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: DatabaseSubnetA

  DatabaseSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref FridayHittVPC
      CidrBlock: 10.0.5.0/24
      AvailabilityZone: !Select 
        - 1
        - !GetAZs ''
      Tags:
        - Key: Name
          Value: DatabaseSubnetB

  DatabaseSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: 'Subnet group for RDS instances'
      SubnetIds:
        - !Ref DatabaseSubnetA
        - !Ref DatabaseSubnetB
      Tags:
        - Key: Name
          Value: DatabaseSubnetGroup

  
  # Routing
  ##########
  NATGatewayEIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  NATGateway:
    Type: 'AWS::EC2::NatGateway'
    DependsOn: AttachGateway  # Ensure the Internet Gateway is attached before creating the NAT Gateway
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: FridayHittNATGateway
        

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref FridayHittVPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  DefaultPublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref FridayHittInternetGateway

  PublicSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref FridayHittVPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable

  DefaultPrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  ApplicationSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref ApplicationSubnet
      RouteTableId: !Ref PrivateRouteTable

  DatabaseSubnetARouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref DatabaseSubnetA
      RouteTableId: !Ref PrivateRouteTable

  DatabaseSubnetBRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref DatabaseSubnetB
      RouteTableId: !Ref PrivateRouteTable  


  # Load Balancer
  ################
  PublicLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: FridayHittPublicLoadBalancer
      Subnets:
        - !Ref PublicSubnet 
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Scheme: internet-facing
      Tags:
        - Key: Name
          Value: FridayHittPublicLoadBalancer 

  # Application Instance 
  #######################
  ApplicationInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: 'ami-0694d931cee176e7d' 
      InstanceType: 't2.micro'  
      SubnetId: !Ref ApplicationSubnet
      SecurityGroupIds:
        - !Ref ApplicationInstanceSecurityGroup
      KeyName: 'aws_atu_key' 
      Tags:
        - Key: Name
          Value: ApplicationInstance

  # Database Instance 
  #######################     
  DatabaseInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBInstanceClass: 'db.t3.micro' 
      AllocatedStorage: '20'  
      DBSubnetGroupName: !GetAtt DatabaseSubnetGroup.DBSubnetGroupName
      VPCSecurityGroups:
        - !Ref DatabaseInstanceSecurityGroup
      DBName: 'FridayHittDatabase' 
      Engine: 'mysql'
      MasterUsername: 'username'
      MasterUserPassword: 'password'
      Tags:
        - Key: Name
          Value: DatabaseInstance



  # Jump Server
  ##############
  BastionHost:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
      KeyName: 'aws_atu_key'
      ImageId: 'ami-0694d931cee176e7d'
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref BastionSecurityGroup
      Tags:
        - Key: Name
          Value: BastionHost        
        
  # Security Groups 
  ##################

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for Load Balancer
      VpcId: !Ref FridayHittVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: LoadBalancerSG

  ApplicationInstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow traffic from the load balancer to the application instance
      VpcId: !Ref FridayHittVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSecurityGroup   
      Tags:
        - Key: Name
          Value: ApplicationInstanceSG  


  DatabaseInstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security group for RDS database instance
      VpcId: !Ref FridayHittVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'  # Replace with the port your database will use (3306 is default for MySQL)
          ToPort: '3306'
          SourceSecurityGroupId: !Ref ApplicationInstanceSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSecurityGroup   
      Tags:
        - Key: Name
          Value: DatabaseInstanceSecurityGroup

  BastionSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow SSH access from the internet to the bastion
      VpcId: !Ref FridayHittVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: '146.70.48.3/32' 
      Tags:
        - Key: Name
          Value: BastionSecurityGroup                        

Outputs:
  VPCId:
    Description: The ID of the VPC
    Value: !Ref FridayHittVPC
  PublicSubnetId:
    Description: The ID of the public subnet
    Value: !Ref PublicSubnet
  InternetGatewayId:
    Description: The ID of the Internet Gateway
    Value: !Ref FridayHittInternetGateway
  ApplicationSubnetId:
    Description: The ID of Private Subnet for Appilcation servers
    Value: !Ref ApplicationSubnet 
  DatabaseSubnetAId:
    Description: The ID of the Private Subnet A for Database servers
    Value: !Ref DatabaseSubnetA
  DatabaseSubnetBId:
    Description: The ID of the Private Subnet B for Database servers
    Value: !Ref DatabaseSubnetB  
  PublicLoadBalancerDNSName:
    Description: DNS name for the public load balancer
    Value: !GetAtt PublicLoadBalancer.DNSName
  ApplicationInstanceId:
    Description: The ID of the application instance
    Value: !Ref ApplicationInstance
  ApplicationInstanceSecurityGroupId:
    Description: The ID of the application instance security group
    Value: !Ref ApplicationInstanceSecurityGroup
  DatabaseInstanceId:
    Description: The ID of the Database instance
    Value: !Ref DatabaseInstance
  DatabaseInstanceSecuityGroup:
    Description: The ID of the Database instance security group
    Value: !Ref DatabaseInstanceSecurityGroup 
       
